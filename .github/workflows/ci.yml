name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

# one workflow per branch at a time → cancelled when you force-push
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  POETRY_VIRTUALENVS_CREATE: "true"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"

jobs:
  # ──────────────────── LINT ────────────────────
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: actions/cache@v4          #  cache pip and pre-commit caches across runs
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
          key: ${{ runner.os }}-lint-${{ hashFiles('pyproject.toml', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-lint-

      - uses: abatilo/actions-poetry@v4
        with:
          poetry-version: "2.1.3"        # pin for reproducibility

      - name: Install dev dependencies
        run: poetry install --no-interaction --no-root --with dev

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run --all-files --show-diff-on-failure

  # ──────────────────── TEST & COVERAGE ────────────────────
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.11"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - uses: abatilo/actions-poetry@v4
        with:
          poetry-version: "2.1.3"

      - name: Install dev dependencies
        run: poetry install --no-interaction --no-root --with dev

      - name: Run tests with coverage
        run: |
          poetry run pytest -q --cov=src --cov-report=xml #--cov-fail-under=50            would change to 70% later

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          flags: unittests
          fail_ci_if_error: true
          git_service: github

  # ──────────────────── SECURITY SCANS ────────────────────
  security:
    needs: lint
    if: ${{ always() }}                 # run even if earlier jobs fail
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: tfsec (Terraform static scan)
        if: hashFiles('**/*.tf') != ''  # skip if no .tf yet
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: false              # HIGH/MED findings break the build

      - name: Checkov (IaC / Docker / Python scan)
        uses: bridgecrewio/checkov-action@v12.1347.0
        with:
          quiet: true
          soft_fail_on: MEDIUM

  # ──────────────────── INFRACOST SCANS ────────────────────
  infracost-pull-request-checks:
    needs: security
    runs-on: : ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
    permissions:
      contents: read
      pull-requests: write # Required to post comments

    steps:
      - name: Infracost setup
        uses: infracost/actions/setup@v3
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Checkout the base branch of the pull request (e.g. main/master).
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=. \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v4

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=. \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      # Posts a comment to the PR using the 'update' behavior.
      # This creates a single comment and updates it. The "quietest" option.
      # The other valid behaviors are:
      #   delete-and-new - Delete previous comments and create a new one.
      #   hide-and-new - Minimize previous comments and create a new one.
      #   new - Create a new cost estimate comment on every push.
      # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{ github.token }} \
                                     --pull-request=${{ github.event.pull_request.number }} \
                                     --behavior=update

